- Excel data manipulation, and transaction processingâ€”three distinct responsibilitiesâ€”it is likely that the facade class is handling too much.
  Each of these responsibilities should ideally be handled by its own class.
  This is a concept known as the Single Responsibility Principle, a core tenet of SOLID principles in object-oriented design.
class PDFProcessor:
    pass  # PDF processing functionality goes here


class ExcelDataHandler:
    pass  # Excel data manipulation functionality goes here


class TransactionProcessor:
    pass  # Transaction processing functionality goes here


class WorkflowFacade:
    def __init__(self):
        self.pdf_processor = PDFProcessor()
        self.xlsx_handler = ExcelDataHandler()
        self.tx_processor = TransactionProcessor()

    def process_workflow(self, pdf_file, xlsx_file, transactions):
        pdf_data = self.pdf_processor.process(pdf_file)
        xlsx_data = self.xlsx_handler.handle(xlsx_file)
        processed_txs = self.tx_processor.process(transactions)

        # etc

- Even though the patterns are class variables for constants that will be shared across instances of the class, it is unruly. Possibly encapsulating the constants in a new class --> data class
  The patterns are not mutable.
from dataclasses import dataclass

@ dataclass
class Patterns:
    total_patterns: list
    date_patterns: list
    vendor_patterns: dict

patterns = Patterns (
    total_patterns=[
      # total patterns
    ],
    date_patterns=[
      # your date patterns
    ],
    vendor_patterns = {
        # your vendor patterns
    }
)

class PDF:
    _patterns = patterns

