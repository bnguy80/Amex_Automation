@startuml
'https://plantuml.com/class-diagram

class Worksheet {
    note top: Utilizes xlwings to interact with Excel and pandas for DataFrame operations
    - name: string
    - sheet: xlwings.Sheet // Usage needed to provide access to the underlying excel sheet, dataframe used as intermediary to manipulate data
    - dataframe: pandas.DataFrame
    + read_data_as_dataframe(): void // Reads data from sheet reference to store it as dataframe
    + update_data_from_dataframe_to_sheet(dataframe: pandas.DataFrame): void // writes manipulated dataframe back into Excel sheet
}

class ConditionalFormatter {
    - formatting_rules: list // List of dictionaries for worksheets, rules, range_address, rule_type, rule_value, format_options
    + apply_conditional_formatting_rule(workbook_name: string): void
}

class Workbook {
    note top: Manages Worksheets with xlwings
    - workbook_name: string
    - worksheets_dict: dict<string, Worksheet>
    + Workbook(workbook_path: string)  // Constructor now takes a path to open or create a workbook
    + add_worksheet(worksheet_name: string): void
    + remove_worksheet(worksheet_name: string): void
    + remove_all_worksheet(): void
    + get_worksheet(worksheet_name: string): worksheets[worksheet_name: string]
    + get_all_worksheets(): worksheets
    + call_macro_workbook(macro_name: string): void
    + save(): void  // Method to save changes to the workbook
}

class PDF {
    note top: Stores extracted data from PDF files
    + pdf_name: string
    + file_path: string
    + total: float
    + date: date MM-DD-YYYY
    + invoice_number: int
    + vendor: string
    + extract_pdf_invoice_total(): void
    + extract_ocr_invoice_total(): void
    + process_totals(): void // Calls the total extraction methods in the correct sequence extract_pdf_invoice_total and falls back to extract_ocr_invoice_total
    + extract_pdf_invoice_date(start_date, end_date): void
    + extract_ocr_invoice_date(start_date, end_date): void
    + process_dates(): void // Calls the date extraction methods in correct sequence extract_pdf_invoice_date and falls back to extract_ocr_invoice_date
    + extract_vendor: void
}

class PDFCollection {
    note top: Manages a collection of PDF objects, facilitating access by name
    - pdfs_dataframe: pd.DataFrame(columns=['File Name', 'File Path', 'Amount', 'Vendor', 'Date'])
    - vendors: list
    + add_pdf(file_path: string, pdf_name: string, start_date: string, end_date: string): void
    + populate_pdf_dataframe_from_worksheet(worksheet_name: string, start_date: string, end_date: string): void
    + populate_vendors_from_vendor_worksheet(vendor_worksheet_name: Worksheet): void ---Make sure correct column!!!
    + remove_pdf(pdf_name: string): void
    + remove_all_pdf(): void
'    + aggregate_data_for_worksheet_update(): void
    + get_pdf_dataframe(): pdfs_dataframe: pd.DataFrame
}

class AutomationController {
    note top: Acts as the facade, simplifying complex operations like PDF processing and data manipulation in Excel worksheets.
    + vendor_worksheet_name: string // Class variable
    + start_date: string
    + end_date: string
    + workbooks_dict: dict<string, Workbook>
    + open_workbook(path: string, workbook_name: string): Workbook  // New method to open a workbook by path
    + save_workbook(workbook_name: string): void  // New method to save a workbook
    + perform_task(workbook_name: string, worksheet_name: string): void
    + update_data_across_workbooks(source_workbook_name: string, target_workbook_name: string, criteria): void
    + update_worksheet_from_pdf_collection((workbook_name: string, worksheet_name: string): void
}

Workbook *- "1..*" Worksheet : contains
Worksheet o-- ConditionalFormatter: utilizes >
PDFCollection *- "0..*" PDF : contains
AutomationController --> Workbook : manages >
AutomationController --> PDFCollection : utilizes >


@enduml
