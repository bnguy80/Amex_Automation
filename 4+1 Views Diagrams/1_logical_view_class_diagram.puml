@startuml
'https://plantuml.com/class-diagram

class PDF <<(D, orchid) dataclass>> {
    Stores extracted data from PDF files
    -- Instance Variables --
    + pdf_name: string
    + file_path: string
    - total: float
    - date: string YYYY-MM-DD
    + vendor: string
    -- Properties--
    + total(extracted_total: Union[string, int, float]): void
    + date(extracted_date: Union[string, datetime.date]): void
}

class PDFError <<(X, red) >> {
    -message: string
    -original_exception: Exception
}

class PDFProcessingManager {
    Manages the processing of pdf data
    -- Class Variables --
    - pdf_counter: int // Show progress when retrieving pdfs
    -- Instance Variables --
    + pdf_proc_mng_df: pd.DataFrame(columns=['File Name', 'File Path', 'Amount', 'Vendor', 'Date'])
    - start_date: string
    - end_date: string
    - text_processor: PDFProcessor
    - ocr_processor: PDFProcessor
    -- Methods --
    + remove_pdf_proc_mng_df_row(pdf_name: string): void
    + clear_pdf_proc_mng_df(): void
    + get_pdf_proc_mng_df(): pdf_proc_mng_df: DataFrame
    + reset_counter(pdf: PDF): void
    - add_pdf(pdf: PDF): void
    - log_pdf_processing_details(self, pdf: PDF, pattern_used_pdf_amount: string, pattern_used_ocr_amount: string, pattern_used_pdf_date: string, pattern_used_ocr_date: string): void
    - select_processor_and_extract_total(pdf: PDF): void // Calls the total extraction methods in the correct sequence
    - select_processor_and_extract_date(): void // Calls the date extraction methods in correct sequence
    - proces_pdf(pdf_path: string, pdf_name: string): void
    + populate_pdf_proc_mng_df(invoice_worksheet: Worksheet, xlookup_table_worksheet: Worksheet): void
}

abstract PDFProcessor {
    -- Class Variables --
    - TOTAL_PATTERNS = List
    - DATE_PATTERNS = List
    - VENDOR_PATTERNS = dict
    - FALL_BACK_TOTAL = float
    - FALL_BACK_DATE = datetime
    - FALL_BACK_VENDOR = string
    -- Instance Variables --
    - start_date: string
    - end_date: string
    - vendors_list: List
    -- Methods --
    + {abstract} extract_total(pdf: PDF): return pattern
    + {abstract} extract_date(pdf: PDF): return pattern
    - get_vendor_patterns(pdf_text: string): return patterns
    + get_vendors_from_xlookup_worksheet(xlookup_table_worksheet: Worksheet): void // populates the vendors_list to be able to extract pdf.vendor.
    + extract_vendor(pdf: PDF): void
}

class PDFPlumberProcessor {
    + extract_total(...): pattern
    + extract_date(...): pattern
}

class PDFOCRProcessor {
    + extract_total(...): pattern
    + extract_date(...): pattern
}

class Worksheet {
    Utilizes xlwings to interact with Excel and pandas for DataFrame operations
    -- Instance Variables --
    - name: string
    - sheet: xlwings.Sheet // Usage needed to provide access to the underlying excel sheet, dataframe used as intermediary to manipulate data
    - worksheet_dataframe: pandas.DataFrame
    - strategy: Strategy
    -- Methods --
    + set_strategy(Strategy): void
    + read_data_as_dataframe(): pandas.DataFrame // Reads data from sheet reference to and returns a dataframe of the sheet
    + update_sheet(dataframe: pandas.DataFrame, progress_bar): void // writes manipulated dataframe back into Excel sheet
}

class Workbook {
    Manages Worksheets with xlwings
    -- Instance Variables --
    - worksheets: dict<string, Worksheet>
    + Workbook(workbook_path: string)  // Constructor now takes a path to open or create a workbook
    -- Methods --
    + add_worksheet(worksheet_name: string): void
    + remove_worksheet(worksheet_name: string): void
    + remove_all_worksheets_dict(): void
    + get_worksheet(worksheet_name: string): worksheets[worksheet_name: string]
    + get_all_worksheets(): worksheets
    + save(save_path: None): void  // Method to save changes to the workbook to same location, but when parameter passed saves to different location
    + close(): void
    + call_macro_workbook(macro_name: string, macro_parameter_1: string, macro_parameter_2: string): void
}

abstract class WorkbookManager {
    + workbook_name: string
    + workbook_path: string
    + workbook : Workbook
    + {abstract} select_worksheet_strategy(worksheet_name: String) : UpdateStrategy
    + get_worksheet(worksheet_name: String) : Worksheet
}

class TemplateWorkbookManager {
    + select_worksheet_strategy(...) : UpdateStrategy
}

class AmexWorkbookManager {
    + select_worksheet_strategy(...) : UpdateStrategy
}

interface UpdateStrategy {
    + {abstract} update_worksheet(worksheet : Worksheet, data : Union[pd.DataFrame, Worksheet]) : void
}

class TemplateTransactionDetails2UpdateStrategy {
    + update_worksheet(...) : void
}

class TemplateInvoiceUpdateStrategy {
    + update_worksheet(...) : void
}

class AmexTransactionDetailsUpdateStrategy {
    + update_worksheet(...) : void
}


class InvoiceMatchingManager {
   Handles the complex data manipulation tasks for AmexAutomationOrchestrator; dependency injection used here
   -- Instance Variables --
   - invoice_df: Optional[pd.DataFrame] = None
   - transaction_details_df: Optional[pd.DataFrame] = None
   + matched_transactions: set[int]
   + matched_invoices: set[Hashable] // Set of indexes from the DataFrame's rows, indicating which invoices have been matched
   end note
   - primary_strategy = MatchingStrategy
   - fallback_strategy = MatchingStrategy
   -- Methods --
   + set_data(invoice_df: pd.DataFrame, transaction_details_df: pd.DataFrame): void
   + execute_invoice_matching(): void
   + sequence_file_names(): void
}

abstract MatchingStrategy {
    -- Methods --
    + {abstract} execute(invoice_row: pd.Series, transaction_details_df: pd.DataFrame, matched_transactions: set[int], matched_invoices: set[Hashable]): boolean
    - {static} load_invoice_data(invoice_row: pd.Series): Tuple
    - {static} add_match(transaction_details_df: pd.DataFrame, found_match_index: int, file_name: string, file_path: string, match_type: string, matched_transactions: set[int], matched_invoices: set[Hashable], invoice_row_index: int): void
}

class ExactAmountDateStrategy {
    + execute(...): boolean
}

class ExactAmountAndExcludeDateStrategy {
    + execute(...): boolean
}

class CombinationTotalStrategy {
    + execute(...): boolean
}

class VendorOnlyStrategy {
    + execute(...): boolean
}

class ProgressTracking {

}

class AmexAutomationOrchestrator {
    Acts as the facade
    Coordinating workflow between different components (processing invoices and transactions). --> Need to refactor to outside the class SRP 6/21/2024
    Integrating different parts of the system (PDF handling, transaction processing, Excel integration).
    -- Class Variables --
    - XLOOKUP_TABLE_WORKSHEET_NAME: string
    - TEMPLATE_WORKBOOK_NAME: string
    - TEMPLATE_INVOICE_WORKSHEET_NAME: string
    - TEMPLATE_TRANSACTION_DETAILS_2_WORKSHEET_NAME: string
    - LIST_INVOICE_NAME_AND_PATH_MACRO_NAME: string
    -- Instance Variables --
'    + workbooks_dict: dict<string, Workbook>
    + amex_path: string
    + amex_statement: string
    + template_workbook_path: string
    + amex_workbook_path: string
    + folder_path_macro: string
    + month_folder_macro: string
    + pdf_proc_mng: PDFProcessingManager(start_date, end_date)
    + invoice_matching_manager: InvoiceMatchingManager()
    + template_workbook_manager: TemplateWorkbookManager()
    + amex_workbook_manager: AmexWorkbookManager()
    -- Methods --
    + prepare_template_workbook(): void
    + process_invoices_worksheet(): void // Processes the Invoice Worksheet with data extracted and uploaded into PDFProcessingManager dataframe
    + process_transaction_details_2_worksheet(): void
}

class MondayBoard <<(D, orchid), dataclass_json>> {

}

class DataFrameAdapter {

}


Workbook *--> "1..*" Worksheet : contains

PDF ..> PDFError : throws

PDFProcessingManager *--> "1..*" PDF : contains
PDFProcessingManager *..> PDFProcessor : depends on

AmexAutomationOrchestrator *..> InvoiceMatchingManager : orchestrates
AmexAutomationOrchestrator *..> WorkbookManager : utilizes
AmexAutomationOrchestrator *..> PDFProcessingManager : orchestrates
AmexAutomationOrchestrator *..> DataFrameAdapter : orchestrates
AmexAutomationOrchestrator *..> ProgressTracking : utilizes

MatchingStrategy <|-- ExactAmountDateStrategy : concrete
MatchingStrategy <|-- ExactAmountAndExcludeDateStrategy : concrete
MatchingStrategy <|-- CombinationTotalStrategy : concrete
MatchingStrategy <|-- VendorOnlyStrategy : concrete

InvoiceMatchingManager *..> MatchingStrategy : depends on

UpdateStrategy <|-- TemplateTransactionDetails2UpdateStrategy : concrete
UpdateStrategy <|-- TemplateInvoiceUpdateStrategy : concrete
UpdateStrategy <|-- AmexTransactionDetailsUpdateStrategy : concrete

Worksheet *..> UpdateStrategy : contain

WorkbookManager <|-- TemplateWorkbookManager : concrete
WorkbookManager <|-- AmexWorkbookManager  : concrete

WorkbookManager "1" *--> "1" Workbook : creates
WorkbookManager ..> UpdateStrategy : sets

PDFProcessor <|-- PDFPlumberProcessor : concrete
PDFProcessor <|-- PDFOCRProcessor : concrete

DataFrameAdapter *..> MondayBoard : utilizes

@enduml
