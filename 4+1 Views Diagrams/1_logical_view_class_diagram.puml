@startuml
'https://plantuml.com/class-diagram

class PDF {
    note top: Stores extracted data from PDF files
    -- Instance Variables --
    + pdf_name: string
    + file_path: string
    + total: float
    + date: date MM-DD-YYYY
    + vendor: string
}

class PDFCollectionManager {
    note top: Manages a collection of PDF objects, facilitating access by name
    -- Class Variables --
    - invoice_counter: int // Show progress when retrieving invoices
    -- Instance Variables --
    - pdfs_dataframe: pd.DataFrame(columns=['File Name', 'File Path', 'Amount', 'Vendor', 'Date'])
    - vendors_list: list
    - start_date: string
    - end_date: string
    - text_processor: PDFProcessor
    - ocr_processor: PDFProcessor
    -- Methods --
    + remove_pdf(pdf_name: string): void
    + remove_all_pdf(): void
    + get_pdf_collection_dataframe(): pdfs_dataframe: DataFrame
    + reset_counter(pdf: PDF): void
    + process_total(pdf: PDF): void // Calls the total extraction methods in the correct sequence
    + process_pdf_date(): void // Calls the date extraction methods in correct sequence
    + add_invoice_to_collection(file_path: string, pdf_name: string): void
    + populate_pdf_collections_vendors_list_from_xlookup_worksheet(xlookup_table_worksheet_name: Worksheet): void ---Make sure correct column!!!
    + populate_pdf_collection_dataframe_from_worksheet(worksheet_name: string): void
}

abstract PDFProcessor {
    -- Class Variables --
    - TOTAL_PATTERNS = List
    - DATE_PATTERNS = List
    - VENDOR_PATTERNS = dict
    - FALL_BACK_TOTAL = float
    - FALL_BACK_DATE = datetime
    - FALL_BACK_VENDOR = string
    -- Instance Variables --
    - start_date: string
    - end_date: string
    -- Methods --
    - identify_vendor(pdf_text: string): return patterns
    + extract_total(pdf: PDF): return pattern
    + extract_date(pdf: PDF): return pattern
    + extract_vendor(pdf: PDF): return pattern
    + match_pdf_invoice_vendor(pdf: PDF, vendor_list: list): void // Sets the vendor of PDF instances if there is a match; vendor_list is provided from PDFCollectionManager
}

class PDFPlumberProcessor {
    + extract_total(...): pattern
    + extract_date(...): pattern
    + extract_vendor(...): pattern
}

class PDFOCRProcessor {
    + extract_total(...): pattern
    + extract_date(...): pattern
    + extract(vendor...): pattern
}

class Worksheet {
    note top: Utilizes xlwings to interact with Excel and pandas for DataFrame operations
    -- Instance Variables --
    - name: string
    - sheet: xlwings.Sheet // Usage needed to provide access to the underlying excel sheet, dataframe used as intermediary to manipulate data
    - worksheet_dataframe: pandas.DataFrame
    - strategy: Strategy
    -- Methods --
    + set_strategy(Strategy): void
    + read_data_as_dataframe(): pandas.DataFrame // Reads data from sheet reference to and returns a dataframe of the sheet
    + update_sheet(dataframe: pandas.DataFrame, progress_bar): void // writes manipulated dataframe back into Excel sheet
}

class Workbook {
    note top: Manages Worksheets with xlwings
    -- Instance Variables --
    - worksheets: dict<string, Worksheet>
    + Workbook(workbook_path: string)  // Constructor now takes a path to open or create a workbook
    -- Methods --
    + add_worksheet(worksheet_name: string): void
    + remove_worksheet(worksheet_name: string): void
    + remove_all_worksheets_dict(): void
    + get_worksheet(worksheet_name: string): worksheets[worksheet_name: string]
    + get_all_worksheets(): worksheets
    + save(save_path: None): void  // Method to save changes to the workbook to same location, but when parameter passed saves to different location
    + call_macro_workbook(macro_name: string, macro_parameter_1: None, macro_parameter_2: void): void
}

abstract class WorkbookManager {
    + workbook_name: string
    + workbook_path: string
    + workbook : Workbook
    + select_worksheet_strategy(worksheet_name: String) : UpdateStrategy
    + get_worksheet(worksheet_name: String) : Worksheet
}

class TemplateWorkbookManager{
    + select_worksheet_strategy(...) : UpdateStrategy
}

class AmexWorkbookManager{
    + select_worksheet_strategy(...) : UpdateStrategy
}

interface UpdateStrategy {
    + update_worksheet(worksheet : Worksheet, data_df : DataFrame, progress_bar : ProgressBar) : void
}

class TransactionDetails2UpdateStrategy{
    + update_worksheet(...) : void
}

class InvoiceUpdateStrategy{
    + update_worksheet(...) : void
}


class InvoiceTransactionMatcher {
    note top: Handles the complex data manipulation tasks for AutomationController; dependency injection used here
   -- Instance Variables --
   - invoice_df: pd.DataFrame = None
   - transaction_details_df: pd.DataFrame = None
   + matched_transactions: set
   + matched_invoices: set
   - strategies = List[MatchingStrategy]
   -- Methods --
   + set_data(invoice_df: pd.DataFrame, transaction_details_df: pd.DataFrame): void
   + find_matching_transactions(): void
   + apply_conditional_formatting_rule(workbook_name: string): void
}

abstract MatchingStrategy {
    -- Instance Variables --
    - vendor: string
    - total: float
    - date: string
    - file_name: string
    - file_path: string
    -- Methods --
    - potential_matches(...): List
    - load_data(invoice_row: pd.Series): Tuple
    + execute(invoice_row: pd.Series, transaction_details_df: pd.DataFrame, matched_transactions: set, matched_invoices: set): boolean
}

class ExactMatchStrategy {
    + execute(...): boolean
}

class ExactAmountAndExcludeDateStrategy {
    + execute(...): boolean
}

class CombinationStrategy {
    + execute(...): boolean
}

class AutomationController {
    note: Acts as the facade
    note: Coordinating workflow between different components (processing invoices and transactions). --> Need to refactor to outside the class SRP 6/21/2024
    note: Integrating different parts of the system (PDF handling, transaction processing, Excel integration).
    -- Class Variables --
    - XLOOKUP_TABLE_WORKSHEET_NAME: string
    - TEMPLATE_WORKBOOK_NAME: string
    - TEMPLATE_INVOICE_WORKSHEET_NAME: string
    - TEMPLATE_TRANSACTION_DETAILS_2_WORKSHEET_NAME: string
    - LIST_INVOICE_NAME_AND_PATH_MACRO_NAME: string
    -- Instance Variables --
'    + workbooks_dict: dict<string, Workbook>
    + pdf_collection: PDFCollectionManager(start_date, end_date)
    + manipulation: InvoiceTransactionMatcher()
    + amex_path: string
    + amex_statement: string
    + start_date: string
    + end_date: string
    + folder_path_macro: string
    + month_folder_macro: string
    -- Methods --
    + {static} duplicate_and_label_rows(DataFrame, string, int): pd.DataFrame
    + open_workbook(path: string, workbook_name: string): Workbook  // New method to open a workbook by path
    + get_workbook(workbook_name: string): workbooks
    + save_selected_workbook(workbook_name: string, save_path: None): void  // New method to save a specific workbook; if save_path parameter passed saves to different location
    + duplicate_and_label_rows(pandas.DataFrame): pandas.DataFrame
    + update_invoices_worksheet_with_all_extracted_data(): void // Reliant on process_invoices_worksheet() get pandas.DataFrame that will update the invoices worksheet
    + process_invoices_worksheet(): void // Processes the Invoice Worksheet from start to finish.
    + process_transaction_details_worksheet(): void
}

Workbook *--> "1..*" Worksheet : contains

PDFCollectionManager *--> "1..*" PDF : contains
PDFCollectionManager o..> PDFProcessor : utilize

AutomationController *..> InvoiceTransactionMatcher : depends on
AutomationController *..> WorkbookManager : depends on
AutomationController *..> PDFCollectionManager : utilize

MatchingStrategy <|-- ExactMatchStrategy : concrete
MatchingStrategy <|-- AmountAndNonDatesStrategy : concrete
MatchingStrategy <|-- CombinationStrategy : concrete

InvoiceTransactionMatcher o..> MatchingStrategy : utilize

UpdateStrategy <|-- TransactionDetails2UpdateStrategy : concrete
UpdateStrategy <|-- InvoiceUpdateStrategy : concrete

Worksheet *..> UpdateStrategy : contain

WorkbookManager <|-- TemplateWorkbookManager : concrete
WorkbookManager <|-- AmexWorkbookManager  : concrete

WorkbookManager "1" *--> "1" Workbook : creates
WorkbookManager ..> UpdateStrategy : sets

PDFProcessor <|-- PDFPlumberProcessor : concrete
PDFProcessor <|-- PDFOCRProcessor : concrete

@enduml
